// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.

#include "demo.h"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_2;



BeginEnd::demo_ptr BeginEnd::demo_Helper::_nil() {
  return ::BeginEnd::demo::_nil();
}

::CORBA::Boolean BeginEnd::demo_Helper::is_nil(::BeginEnd::demo_ptr p) {
  return ::CORBA::is_nil(p);

}

void BeginEnd::demo_Helper::release(::BeginEnd::demo_ptr p) {
  ::CORBA::release(p);
}

void BeginEnd::demo_Helper::marshalObjRef(::BeginEnd::demo_ptr obj, cdrStream& s) {
  ::BeginEnd::demo::_marshalObjRef(obj, s);
}

BeginEnd::demo_ptr BeginEnd::demo_Helper::unmarshalObjRef(cdrStream& s) {
  return ::BeginEnd::demo::_unmarshalObjRef(s);
}

void BeginEnd::demo_Helper::duplicate(::BeginEnd::demo_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

BeginEnd::demo_ptr
BeginEnd::demo::_duplicate(::BeginEnd::demo_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

BeginEnd::demo_ptr
BeginEnd::demo::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


BeginEnd::demo_ptr
BeginEnd::demo::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

BeginEnd::demo_ptr
BeginEnd::demo::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_demo _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_demo* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_demo;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* BeginEnd::demo::_PD_repoId = "IDL:BeginEnd/demo:1.0";


BeginEnd::_objref_demo::~_objref_demo() {
  
}


BeginEnd::_objref_demo::_objref_demo(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::BeginEnd::demo::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
BeginEnd::_objref_demo::_ptrToObjRef(const char* id)
{
  if (id == ::BeginEnd::demo::_PD_repoId)
    return (::BeginEnd::demo_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::BeginEnd::demo::_PD_repoId))
    return (::BeginEnd::demo_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for BeginEnd::demo::method_a

// Proxy call descriptor class. Mangled signature:
//  void_i_cBeginEnd_mDoubleSeq
class _0RL_cd_e1a449f5ca0f40d4_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_e1a449f5ca0f40d4_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  BeginEnd::DoubleSeq_var arg_0_;
  const BeginEnd::DoubleSeq* arg_0;
};

void _0RL_cd_e1a449f5ca0f40d4_00000000::marshalArguments(cdrStream& _n)
{
  (const BeginEnd::DoubleSeq&) *arg_0 >>= _n;

}

void _0RL_cd_e1a449f5ca0f40d4_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new BeginEnd::DoubleSeq;
  (BeginEnd::DoubleSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_e1a449f5ca0f40d4_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_e1a449f5ca0f40d4_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_e1a449f5ca0f40d4_00000000* tcd = (_0RL_cd_e1a449f5ca0f40d4_00000000*)cd;
  BeginEnd::_impl_demo* impl = (BeginEnd::_impl_demo*) svnt->_ptrToInterface(BeginEnd::demo::_PD_repoId);
  impl->method_a(*tcd->arg_0);


}

void BeginEnd::_objref_demo::method_a(const ::BeginEnd::DoubleSeq& args)
{
  _0RL_cd_e1a449f5ca0f40d4_00000000 _call_desc(_0RL_lcfn_e1a449f5ca0f40d4_10000000, "method_a", 9);
  _call_desc.arg_0 = &(::BeginEnd::DoubleSeq&) args;

  _invoke(_call_desc);



}

BeginEnd::_pof_demo::~_pof_demo() {}


omniObjRef*
BeginEnd::_pof_demo::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::BeginEnd::_objref_demo(ior, id);
}


::CORBA::Boolean
BeginEnd::_pof_demo::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::BeginEnd::demo::_PD_repoId))
    return 1;
  
  return 0;
}

const BeginEnd::_pof_demo _the_pof_BeginEnd_mdemo;

BeginEnd::_impl_demo::~_impl_demo() {}


::CORBA::Boolean
BeginEnd::_impl_demo::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "method_a")) {

    _0RL_cd_e1a449f5ca0f40d4_00000000 _call_desc(_0RL_lcfn_e1a449f5ca0f40d4_10000000, "method_a", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
BeginEnd::_impl_demo::_ptrToInterface(const char* id)
{
  if (id == ::BeginEnd::demo::_PD_repoId)
    return (::BeginEnd::_impl_demo*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::BeginEnd::demo::_PD_repoId))
    return (::BeginEnd::_impl_demo*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
BeginEnd::_impl_demo::_mostDerivedRepoId()
{
  return ::BeginEnd::demo::_PD_repoId;
}

POA_BeginEnd::demo::~demo() {}

